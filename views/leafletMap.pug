//  Created by msgis-student on 6/9/2017.

doctype html
html
  head
    title= 'SNAP Restoration Map'
    script. 
      var isMobile = false;
      // device detection
      if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) isMobile = true;
      if (isMobile)
        window.location.href = '/mobile';
    //link(rel='stylesheet', href='https://unpkg.com/leaflet@1.2.0/dist/leaflet.css')
    link(rel='stylesheet', href='/public/css/leaflet.css')
    link(rel='stylesheet', href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.9/leaflet.draw.css")
    link(rel='stylesheet', href='/public/css/styledLayerControl.css')
    link(rel='stylesheet', href='/public/css/sidebarV2.css')
    link(rel='stylesheet', href='/public/css/leaflet-topCenter.css')
    link(rel='stylesheet', href='/public/css/leaflet.search.min.css')
    
    script(src='/public/scripts/jquery.min.js')
    //script(src="https://unpkg.com/kinto@9.0.2/dist/kinto.min.js")
    
    script(src="/public/scripts/polyfill.min.js")
    script(src="/public/scripts/dexie.min.js")
    script(src='/public/scripts/leaflet.js' type='text/javascript')
    script(src='/public/scripts/localforage.min.js')
    script(src='/public/scripts/leaflet.offline.min.js')
    script(src='https://unpkg.com/pbf@3.0.5/dist/pbf.js')
    
    script(src='/public/scripts/bowser.min.js')

    script(src='https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.2/leaflet.draw.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/jquery.loadingoverlay/1.5.3/loadingoverlay.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/jquery.loadingoverlay/latest/loadingoverlay_progress.min.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js')
    script(src='https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js')
    script(src='https://cdn.rawgit.com/nnattawat/flip/master/dist/jquery.flip.min.js')
    

    //script(src="https://unpkg.com/shpjs@latest/dist/shp.min.js")
    //script(src='/public/scripts/leaflet.shapefile.js')
    script(src='/public/scripts/formDIV.js')
    script(src='/public/scripts/leaflet-topCenter.js')
    
    
    script(src='/public/lib/pako/pako_inflate.min.js')
    script(src='/public/lib/leaflet/leaflet.ajax.js')
    script(src='/public/lib/leaflet/leaflet.VectorTile.js')
    script(src='/public/scripts/leaflet.LayerControl.Include.js')
    script(src='/public/scripts/leaflet.VectorGrid.mod.js')
    script(src='/public/scripts/leaflet.mbTiles.js')
    //script(src="https://jsconsole.com/js/remote.js?f7599f18-06f3-47dc-bb3f-f41097176b9b")
    
    //script(src='https://unpkg.com/leaflet-sidebar')
    
    script(src='/public/scripts/leaflet.sidebar.min.js')
    script(src='/public/scripts/leaflet.search.min.js')
    
    script(src='/public/scripts/featureStyles.js')
    script(src='/public/scripts/featureStylesEdit.js')
    script(src='/public/scripts/styledLayerControl.js')
    //link(href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css", rel="stylesheet")
    
    // Latest compiled and minified CSS
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')
    // Optional theme
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css', integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp', crossorigin='anonymous')
    // Latest compiled and minified JavaScript
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')
    
    link(rel='stylesheet', href='/public/css/style.css')
    meta(name='viewport', content='initial-scale=1, maximum-scale=1')

    body
      #snackbar Some text some message..

      #header
        nav.navbar.navbar-default.navbar-inverse(role='navigation', style='z-index: 10000;')
          .container-fluid
            // Brand and toggle get grouped for better mobile display
            .navbar-header
              button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#bs-example-navbar-collapse-1')
                span.sr-only Toggle navigation
                span.icon-bar
                span.icon-bar
                span.icon-bar
                
              a.pull-left  
                #card
                  .front
                    img(src='/public/css/images/logos/blm.png', width='45px', height='45px', float='left') 
                  .back
                    img(src='/public/css/images/logos/fs.png', width='38px', height='45px', float='left') 
                //#wrapD3Cube
                  #D3Cube
                    #side2
                      img(src='/public/css/images/logos/blm.png', width='45px', height='45px', float='left') 
                    #side3
                      img(src='/public/css/images/logos/fs.png', width='38px', height='45px', float='left') 
                    #side4
                      img(src='/public/css/images/logos/fws.png', width='45px', height='45px', float='left') 
                    #side5
                      img(src='/public/css/images/logos/nps.png', width='45px', height='45px', float='left') 
                
                script.
                  $("#card").flip();
                  
                  var count = 2;
                  setInterval(function() {
                    $("#card").flip('toggle');
                    
                  }, 5000);
                  
              // Collect the nav links, forms, and other content for toggling
              .navbar-brand SNAP Restoration
            #bs-example-navbar-collapse-1.collapse.navbar-collapse
              ul.nav.navbar-nav(style='border-left: 1px solid #000000;')
                li.active
                  a(href='#') Map View
                li#adminTab
                  a(href='/admin/Add.html') Admin
              ul.nav.navbar-nav.navbar-right
                li#loginTab
                  a(href='login.html')
                    b Login
                li#logoutTab
                  b(style='color: #9d9d9d') Hello, 
                    span#username Username
                  a(href='javascript:logout();', style='display: inline-block; padding-left: 0px;') &nbsp(logout)
                                
      #overlay
      #map

        script(src='/public/scripts/asyncAddLayersV2.js')
        script.
          //alert('Hello ' + bowser.name + ' ' + bowser.version);
          var loggedIn = false;
          $.ajax({
                type: "GET",
                url: "/loginStatus",
                dataType : "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) { 
                  console.log(data);
                  loggedIn = true;
                  document.getElementById('username').innerHTML = data.user;
                  document.getElementById('logoutTab').style.display = "block";
                  document.getElementById('loginTab').style.display = "none";
                  document.getElementById('adminTab').style.display = "block";
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    console.warn(XMLHttpRequest.responseText);
                }
            })
          
          function logout() {
            console.log("logout initiated")
            $.ajax({
                type: "GET",
                url: "/logout",
                dataType : "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) { 
                  console.log(data);
                  document.getElementById('logoutTab').style.display = "none";
                  document.getElementById('loginTab').style.display = "block";
                  document.getElementById('adminTab').style.display = "none";
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    console.warn(XMLHttpRequest.responseText);
                }
            })
          }
          
          //import "babel-polyfill";
          var map = L.map('map').setView([36.211303, -115.114929], 8);
          map.removeControl(map.zoomControl);
          // https://stackoverflow.com/questions/39767499/how-to-set-the-zindex-layer-order-for-geojson-layers
          // createPane was used in this thread to control the order of the layers
          
          map.createPane('Points').style.zIndex = 390;
          map.createPane('Lines').style.zIndex = 380;
          map.createPane('Polygons').style.zIndex = 370;
          map.createPane('Regions').style.zIndex = 360;
          map.createPane('Bounds_County').style.zIndex = 350;
          map.createPane('Misc').style.zIndex = 340;
          
          
          var baseLayer = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18,
            id: 'rogerdodger617.2p4pk9co',
            accessToken: 'pk.eyJ1Ijoicm9nZXJkb2RnZXI2MTciLCJhIjoiY2l5aG83M3pzMDR3aDJ3cndobzdzOWFhMSJ9.b6ssRylqfIz40O7vKcDb2g'
          }).addTo(map);
          
          var mapOpenStreet = L.tileLayer('//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	name: "OpenStreetMap",
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18
          });
          
          var mapGRoad = L.tileLayer('https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	name: "Google Roadmap",
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGSatellite = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	name: "Google Satellite",
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGHyb = L.tileLayer('https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	name: "Google Hybrid",
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGTerrain = L.tileLayer('https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank">USA.gov</a>',
          	name: "Google Terrain",
          	zIndex: 1,
          	minZoom: 7,
            maxZoom: 18,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          
          // var canvasRenderer = L.canvas();
          // function drawRect(context, style) {
          // 	context.strokeStyle = style.color;
          // 	if (style.dashArray) {
          // 		context.setLineDash(style.dashArray.split(','))
          // 	}
          // 	context.lineWidth = 3;
          // 	context.strokeRect(0, 0, 20, 12);
          // }
          
          // var layerStorage = [
          // 	'Soil Vulnerability'
          // ];
          // var soil = L.mbTiles("public/data/soil/{z}/{x}/{y}.pbf", {
          // 	name: "Soil Vulnerability",
          // 	storage: "Soil Vulnerability",
          // 	mbtileLayerName: "soil",
          // 	maxNativeZoom: 10,
          // 	minNativeZoom: 10,
          // 	minZoom: 6,
          // 	bounds: L.latLngBounds([36.9,-116.2],[35.0,-113.9]),
          // 	legendIcon: drawRect,	
          // 	style: function(feature) {
          // 		return {
          // 			interactive: true,
          // 			pane: 'polygons',
          // 			renderer: canvasRenderer,
          // 			weight: 0.5,
          // 			color: '#0f0',
          // 			opacity: 1,
          // 			// dashArray: '5, 3',
          // 			fillColor: '#e39e1c',
          // 			fillOpacity: 0.4,
          // 			// fill: false
          // 		}
          // 	}
          // }).addTo(map)
          
          
          
          // this used to be a simple async function but in order to work on I.E. this is what it has become...
          function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
            _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      if (typeof Dexie == 'function') { 
                        console.log('dexie is here');
                        return getLayers();
                      }
                      else {
                        console.log('dexie not here rn');
                      }
                      
                      // console.log('got here'); 
                      // $.getScript('/public/scripts/dexie.min.js', function()
                      // {
                      //   console.log('got here too');
                      //   $.getScript('/public/scripts/formDIV.js', function(){});
                      //   $.getScript('/public/scripts/asyncAddLayersV2.js', function(){return getLayers();});
                      // });
                      
                    case 3:
                      _context.next = 8;
                      break;
            
                    case 5:
                      _context.prev = 5;
                      _context.t0 = _context["catch"](0);
            
                      console.error(_context.t0);
            
                    case 8:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this, [[0, 5]]);
            }))();

          //(async function () {
            //try {
             // await getLayers();
            //}
            //catch (err) {
             // console.error(err)
            //}
          //}());
        
          var controlOptions = {
            container_width: "350px",
            container_maxHeight: "100%",
            group_maxHeight: "100%",
            autoZIndex: false,
            exclusive: false,
            collapsed: false
          };

          var overLay = [];

          var control = L.Control.styledLayerControl(null, overLay, controlOptions);
          map.addControl(control);
          control.addOverlay( baseLayer, "MapBox", {groupName : "Basemaps"} );
          control.addOverlay( mapOpenStreet, "OpenStreetMap", {groupName : "Basemaps"} );
          control.addOverlay( mapGRoad, "Google Roadmap", {groupName : "Basemaps"} );
          control.addOverlay( mapGSatellite, "Google Satellite", {groupName : "Basemaps"} );
          control.addOverlay( mapGHyb, "Google Hybrid", {groupName : "Basemaps"} );
          control.addOverlay( mapGTerrain, "Google Terrain", {groupName : "Basemaps"} );
          //control.addOverlay(soil, 'soil', {groupName: 'soil', expanded: true});
          // creates a temp layer so it can store the new features
          var editableLayers = new L.FeatureGroup();
          map.addLayer(editableLayers);
          L.control.scale({position: 'bottomright'}).addTo(map);
          
          var options = {
            position: 'bottomright',
            draw: {
              polyline: {
                allowIntersection: false,
                drawError: {
                  color: '#e10100', // Color the shape will turn when intersects
                  message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                },
                shapeOptions: {
                  color: '#e10100',
                  weight: 3
                }
              },
              polygon: {
                allowIntersection: false, // Restricts shapes to simple polygons
                drawError: {
                  color: '#e10100', // Color the shape will turn when intersects
                  message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                },
                shapeOptions: {
                  color: '#e10100'
                }
              },
              circle: false, // Turns off this drawing tool
              rectangle: false,
              marker: {
                icon: new L.Icon.Default()
              }
            },
            edit: {
              featureGroup: editableLayers, //REQUIRED!!
              edit: true,
              remove: true,
              selectedPathOptions: { // this property should be one level up
                color: '#000',
                fillColor: '#000'
              }
            }
          };
          
          L.Control.DrawingController = L.Control.extend({
              constructor: function constructor() {
                var button = null;
              },
              onAdd: function(map) {
                  button = L.DomUtil.create('button', 'drawingController');
                  button.innerHTML = 'Insert Value';
                  button.style.width = '100px';
                  button.style.zIndex = 2000;
                  button.className += " btn btn-default"
                  return button;
              },
              onRemove: function(map) {
                  // Nothing to do here
              },
              setVal: function(val, id) {
                button.innerHTML = val;
                button.id = id;
              },
              getButton: function() {
                return button;
              },
              setClass: function(newClass) {
                button.className = newClass + ' leaflet-control btn btn-default';
              }
          });
          
          L.control.drawingController = function(opts) {
              return new L.Control.DrawingController(opts);
          }
          
          // These buttons are the drawing tools buttons that appear when drawing/editing. 
          var undoButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          undoButton1.setVal('Undo Last', 'undoDraw');
          var compButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          compButton1.setVal('Finish', 'finishDraw');
          var cancelButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          cancelButton1.setVal('Cancel', 'cancelDraw');
          cancelButton1.setClass('drawingEditController');
          var saveButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          saveButton1.setVal('Finish', 'saveDraw');
          saveButton1.setClass('drawingEditController');
          
          var drawControl = new L.Control.Draw(options);
          //map.addControl(drawControl);
          L.control.zoom({position: 'topright'}).addTo(map);
          
          var thisLayerJSON
          var thisLayer
          
          // Function is called when a feature drawing is completed. 
          map.on(L.Draw.Event.CREATED, function (event) {
            var layer = event.layer;
            thisLayer = layer;
            editableLayers.addLayer(layer);
            thisLayerJSON = layer.toGeoJSON();
            console.log(thisLayerJSON);
            //toggleButtons();
            
            turnOffTools();
            document.getElementById('step1').style.display = 'none';
            document.getElementById('step2').style.display = 'block';
            if (barrButton != null) {
              if (thisLayerJSON.geometry.type == "LineString")
                barrButton.style.display = 'block';
              else
                barrButton.style.display = 'none';
            }
              
            
          });
          //new L.shapefile('public/geoJSON/roads.zip').addTo(map);
        
      #sidebar.sidebar.collapsed
        // Nav tabs
        .sidebar-tabs
          ul(role='tablist')
            // top aligned tabs
            li
              a(href='#layers', role='tab')
                span.glyphicon.glyphicon-menu-hamburger(aria-hidden='true')
            li
              a(href='#drawTools', role='tab')
                span.glyphicon.glyphicon-pencil(aria-hidden='true')
            li
              a(href='#formTools', role='tab')
                span.glyphicon.glyphicon-info-sign(aria-hidden='true')
            li
              a(href='#savedSubs', role='tab')
                span.glyphicon.glyphicon-list-alt(aria-hidden='true')
            li
              a(href='#searchBar', role='tab')
                span.glyphicon.glyphicon-search(aria-hidden='true')

          //ul(role='tablist')
            // bottom aligned tabs
            li
              a(href='#settings', role='tab')
                span.glyphicon.glyphicon-cog(aria-hidden='true')

        // Tab panes
        .sidebar-content
          #layers.sidebar-pane
            h1.sidebar-header
              | Layers
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            p.legend
              span.legend-item
                img(src='/public/css/images/npsSquare.png', width='8%', height='35%') 
                |  NPS 
                img(src='/public/css/images/blmSquare.png', width='8%', height='35%')  
                |  BLM 
              span.legend-item
                img(src='/public/css/images/fwsSquare.png', width='8%', height='35%') 
                |  FWS 
                img(src='/public/css/images/fsSquare.png', width='8%', height='35%') 
                |  FS 
            #layerTools2

          #drawTools.sidebar-pane
            h1.sidebar-header
              | Draw Tools
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #step1
              h1 Select shape to draw:
              button#drawLineB.drawControl2.btn.btn-default
                | Line
              br
              button#drawPolygonB.drawControl2.btn.btn-default
                | Polygon
              br
              button#drawMarkerB.drawControl2.btn.btn-default
                | Point
              br
            #step1Drawing
              button#editShapeB.drawControl2.btn.btn-default
                | Edit
              br
              button#delShapeB.drawControl2.btn.btn-default
                | Delete
              br
              button#undoB.drawControl2.btn.btn-default
                | Undo
              br
              button#compB.drawControl2.btn.btn-default
                | Complete
              br
            #step2
              button#backStep1.btn.btn-danger
                span.glyphicon.glyphicon-chevron-left(aria-hidden='true')
                |  Back
              h1 Select a feature type:
              button#restButton.drawControl2.btn.btn-default
                | Restoration
              br
              button#distButton.drawControl2.btn.btn-default
                | Disturbance
              br
              button#barrButton.drawControl2.btn.btn-default
                | Barrier
              br
            #step3
              button#backStep2.btn.btn-danger
                span.glyphicon.glyphicon-chevron-left(aria-hidden='true')
                |  Back
              #sidebar2
                

          #formTools.sidebar-pane
            h1.sidebar-header
              | Marker Info
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #sidebar1
              
          #savedSubs.sidebar-pane
            h1.sidebar-header
              | Saved Submissions
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #editSaved
            #savedContent
              #savedCount
              table#tableSubs
                #saved
              br
              button#sync.btn.btn-primary Submit All Forms
              
          #searchBar.sidebar-pane
            h1.sidebar-header
              | Search
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #searchBarTag
              #searchFilters(style="display:none;")
                button.btn.btn-danger#filterBack Back
                h5 Select Feature Type
                ul.nav.nav-pills.nav-justified.filterType
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='D' ) Disturbance
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='R' ) Restoration
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='B' ) Barrier
                h5 Select Feature Shape
                ul.nav.nav-pills.nav-justified.filterShape
                  li(role='presentation', style='background-color: white;')
                    a#markerFilter(data-toggle='tab', value='M' ) Marker
                  li(role='presentation', style='background-color: white;')
                    a#lineFilter(data-toggle='tab', value='L' ) Line
                  li(role='presentation', style='background-color: white;')
                    a#polygonFilter(data-toggle='tab', value='P' ) Polygon
                    // https://www.bootply.com/112163
                #filterForm
              #searchStep
                .input-group
                  span.input-group-btn
                    button#filterSearch.btn.btn-default(type='button') Filters
                    button#filterClear.btn.btn-warning(type='button' style='display: none;') Clear Filters
                  input#searchID.form-control(type='text', placeholder='Search by keyword...')
                  span.input-group-btn
                    button#searchButton.btn.btn-default(type='button') Search
                table(style="width: 100%")
                  thead
                  tr
                    th Agency
                    th Region
                    th(style="width: 56px") Action
                  tbody#filteredFeatures
            #filters
              
          
                
      script. 
       
        // step 1 buttons
        var lineButton = document.getElementById("drawLineB");
        var polygonButton = document.getElementById("drawPolygonB");
        var markerButton = document.getElementById("drawMarkerB");
        // Editing Buttons
        var editButton = document.getElementById("editShapeB");
        var deleteButton = document.getElementById("delShapeB");
        // step 2 buttons
        var restButton = document.getElementById("restButton");
        var distButton = document.getElementById("distButton");
        var barrButton = document.getElementById("barrButton");
        // draw tool buttons
        var undoDrawButton = document.getElementById("undoDraw");
        var finDrawButton = document.getElementById("finishDraw");
        
        // "currForm" holds the current form that is selected. 
        var currForm = null;
        
        // Not sure what I used these for.
        var undoButton = document.getElementById("undoB");
        var compButton = document.getElementById("compB");
        
        // These are enabled to draw featues onto the map. 
        var drawLine = new L.Draw.Polyline(map, drawControl.options.polyline);
        var drawPoly = new L.Draw.Polygon(map, drawControl.options.polygon);
        var drawMark = new L.Draw.Marker(map, drawControl.options.marker);
        
        // This saves the value of the current drawShape selected to properly remove
        // vertices when using tool buttons because it contains bugs, update Leaflet Draw to fix. 
        var currShape = null;
        
        // Function turns off all drawtools and unsets all buttons. 
        function allOff() {
          var str = lineButton.className;
          if (str.includes(" active")) 
            lineButton.className = str.replace(" active", "");
          str = polygonButton.className;
          if (str.includes(" active")) 
            polygonButton.className = str.replace(" active", "");
          str = markerButton.className;
          if (str.includes(" active")) 
            markerButton.className = str.replace(" active", "");
          drawLine.disable();
          drawPoly.disable();
          drawMark.disable();
        }
        
        // These functions turn on/off the tools when drawing a feature.
        function turnOnTools() {
          var myElements = document.querySelectorAll(".drawingController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "block";
          }
        }
        function turnOffTools() {
          var myElements = document.querySelectorAll(".drawingController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "none";
          }
        }
        
        // These functions turn on/off the tools when editing a saved submission. 
        function turnOnEditTools() {
          var myElements = document.querySelectorAll(".drawingEditController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "block";
          }
        }
        function turnOffEditTools() {
          var myElements = document.querySelectorAll(".drawingEditController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "none";
          }
        }
        
        // These listeners are for the back buttons in the draw tools tab. 
        document.getElementById("backStep1").addEventListener("click", function(){
          allOff();
          document.getElementById('step1').style.display = 'block';
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'none';
          map.removeLayer(thisLayer);
        });
        document.getElementById("backStep2").addEventListener("click", function(){
          document.getElementById('step1').style.display = 'none';
          document.getElementById('step2').style.display = 'block';
          document.getElementById('step3').style.display = 'none';
          currForm.toggle();
        });
        
        // These listeners are for the buttons are to select a feature to draw.
        lineButton.addEventListener("click", function(){
            allOff();
            lineButton.className += " active";
            drawLine.enable();
            currShape = drawLine;
            turnOnTools();
        });
        polygonButton.addEventListener("click", function(){
            allOff();
            polygonButton.className += " active";
            drawPoly.enable();
            currShape = drawPoly;
            turnOnTools();
        });
        markerButton.addEventListener("click", function(){
            allOff();
            markerButton.className += " active";
            drawMark.enable();
            currShape = drawMark;
            //turnOnTools();
        });
        
        // These listeners are for the draw tools when drawing a new feature. 
        undoDrawButton.addEventListener("click", function(){ 
          if (bowser.name != "Firefox")
            currShape.deleteLastVertex();
          currShape.deleteLastVertex();
        });
        finDrawButton.addEventListener("click", function(){ 
          if (bowser.name != "Firefox")
            currShape.deleteLastVertex();
          currShape.completeShape();
        });
        
        // These listeners are used when editing a saved submission, I think. 
        editButton.addEventListener("click", function(){
            new L.EditToolbar.Edit(map, {
                featureGroup: drawControl.options.edit.featureGroup,
                selectedPathOptions: drawControl.options.edit.selectedPathOptions
            }).enable()
        });
        deleteButton.addEventListener("click", function(){
            new L.EditToolbar.Delete(map, {
                featureGroup: drawControl.options.edit.featureGroup
            }).enable()
        });
        
        // These three button listeners toggle the correct form for which option is selected
        restButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          switch(thisLayerJSON.geometry.type){
            case 'Point':
              currForm = $('#restoPointForm');
              break;
            case 'Polygon':
              currForm = $('#restoPolyForm');
              break;
            case 'LineString':
              currForm = $('#restoLineForm');
              break;
          }
          $('#restoPointForm').toggle(thisLayerJSON.geometry.type === 'Point');
          $('#restoPolyForm').toggle(thisLayerJSON.geometry.type === 'Polygon');
          $('#restoLineForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        distButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          switch(thisLayerJSON.geometry.type){
            case 'Point':
              currForm = $('#distPointForm');
              break;
            case 'Polygon':
              currForm = $('#distPolyForm');
              break;
            case 'LineString':
              currForm = $('#distLineForm');
              break;
          }
          $('#distPointForm').toggle(thisLayerJSON.geometry.type === 'Point');
          $('#distPolyForm').toggle(thisLayerJSON.geometry.type === 'Polygon');
          $('#distLineForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        barrButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          currForm = $('#barrierForm');
          $('#barrierForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        
        // side bar is added to map after everything is drawn. 
        var sidebar = L.control.sidebar({ autopan: true, id: 'sidebar' }).addTo(map);
        
        
        // Moves the layer controls into the sidebar
        var htmlObject = control.getContainer();
        var a = document.getElementById('layerTools2');
        // Finally append that node to the new parent, recursively searching out and re-parenting nodes.
        function setParent(el, newParent)
        {
          newParent.appendChild(el);
        }
        setParent(htmlObject, a);
        
        // This is the function that creates a Toast popup Message. 
        function popupMessage(text) {
          var popup = document.getElementById("snackbar")
          popup.innerHTML = text;
          popup.className = "show";
      
          // After 3 seconds, remove the show class from DIV
          setTimeout(function(){ popup.className = popup.className.replace("show", ""); }, 3000);
        }