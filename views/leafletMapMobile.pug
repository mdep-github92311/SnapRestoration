// There has to be a seperate .pug file for mobile because this is cached for offline. 
// The downside is that when this is updated, the client needs to clear their cache to see changes. 
// Would be better to use Service Workers for offline but it is not compatible on all browsers. 
doctype html
html(manifest='cache.manifest', type='text/cache-manifest')
  head
    title= 'SNAP Restoration Map'
    meta(name='viewport', content='width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
    //link(rel='stylesheet', href='https://unpkg.com/leaflet@1.2.0/dist/leaflet.css')
    
    link(rel='stylesheet', href='/public/css/leaflet.css')
    link(rel='stylesheet', href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.2/leaflet.draw.css")
    link(rel='stylesheet', href='/public/css/styledLayerControl.css')
    link(rel='stylesheet', href='/public/css/sidebarV2.css')
    link(rel='stylesheet', href='/public/css/leaflet-topCenter.css')
    link(rel='stylesheet', href='/public/css/leaflet.search.min.css')
    script(src='/public/scripts/jquery.min.js')
    //script(src="https://unpkg.com/kinto@9.0.2/dist/kinto.min.js")
    
    script(src="/public/scripts/polyfill.min.js")
    script(src="/public/scripts/dexie.min.js")
    script(src='/public/scripts/leaflet.js' type='text/javascript')
    script(src='/public/scripts/localforage.min.js')
    script(src='/public/scripts/leaflet.offline.min.js')
    script(src='https://unpkg.com/pbf@3.0.5/dist/pbf.js')

    script(src='/public/scripts/leaflet.draw.js' type='text/javascript')
    // script(src='https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.2/leaflet.draw.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/jquery.loadingoverlay/1.5.3/loadingoverlay.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/jquery.loadingoverlay/latest/loadingoverlay_progress.min.js' type='text/javascript')
    script(src='https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js')
    script(src='https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js')
    //script(src='https://unpkg.com/geojson-vt@3.0.0/geojson-vt.js')
    
    

    //script(src="https://unpkg.com/shpjs@latest/dist/shp.min.js")
    //script(src='/public/scripts/leaflet.shapefile.js')
    script(src='/public/scripts/formBuilder.js')
    script(src='/public/scripts/formDIV.js')
    script(src='/public/scripts/leaflet-topCenter.js')
    
    
    script(src='/public/lib/pako/pako_inflate.min.js')
    script(src='/public/lib/leaflet/leaflet.ajax.js')
    script(src='/public/lib/leaflet/leaflet.VectorTile.js')
    script(src='/public/scripts/leaflet.LayerControl.Include.js')
    script(src='/public/scripts/leaflet.VectorGrid.mod.js')
    script(src='/public/scripts/leaflet.mbTiles.js')
    //script(src="https://jsconsole.com/js/remote.js?f7599f18-06f3-47dc-bb3f-f41097176b9b")
    
    //script(src='https://unpkg.com/leaflet-sidebar')
    
    script(src='/public/scripts/leaflet.sidebar.min.js')
    script(src='/public/scripts/leaflet.search.min.js')
    
    script(src='/public/scripts/featureStyles.js')
    script(src='/public/scripts/featureStylesEdit.js')
    script(src='/public/scripts/styledLayerControl.js')
    //link(href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css", rel="stylesheet")
    
    // Latest compiled and minified CSS
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')
    // Optional theme
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css', integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp', crossorigin='anonymous')
    // Latest compiled and minified JavaScript
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')
    link(rel='stylesheet', href='/public/css/style.css')


    style(type='text/css').
      html, body {
        height: 99.9%;
        padding: 0;
        margin: 0;
        position:fixed;
        top:0;
        bottom:0;
        left:0;
        right:0;
      }
      
      body {
        position: relative;
      }
      
      .navbar {
        margin-bottom: 0;
      }
      
      
      @media only screen 
        and (min-device-width: 280px) 
        and (max-device-width: 350px)
        and (-webkit-min-device-pixel-ratio: 2) {
          .navbar-brand {
            font-size: 17px !important;
        }
      }
      
      @media only screen 
        and (min-device-height: 280px) 
        and (max-device-height: 350px)
        and (-webkit-min-device-pixel-ratio: 2) {
          html, body {
            height: 96%;
        }
      }
      
      @media only screen 
        and (min-device-height: 350px) 
        and (max-device-height: 415px)
        and (-webkit-min-device-pixel-ratio: 2) {
          html, body {
            height: 97%;
        }
      }
      
      @media only screen 
        and (min-device-height: 415px) 
        and (max-device-height: 480px)
        and (-webkit-min-device-pixel-ratio: 2) {
          html, body {
            height: 98%;
        }
      }
      
      @media only screen 
        and (min-device-height: 480px) 
        and (max-device-height: 545px)
        and (-webkit-min-device-pixel-ratio: 2) {
          html, body {
            height: 99%;
        }
      }
      
      .legend {
        color: black;
        background-color: white;
        padding: 5px;
      }

      #map {
        float: left;
        width: 100%;
        height: 100%;
      }

      #popUp_FormDIV {
        float: right;
        width: 20%;
        height: 90%;
        overflow: auto;
      }

      #popUpDIV {
        display: block;
        /* float: left; */
        width: 100%;
        height: 50%;
        overflow: auto;
        margin: 5%;
      }

      #formPopDIV {
        /* float: right; */
        width: 100%;
        bottom: 40%;
        height: 50%;
        /* position: absolute; */
        overflow: auto;
        margin: 5%;
      }
      
      #sidebar1 {
        color: black;
        font-size: 14px;
        padding: 0 !important;
      }
      
      #drawTools2 {
        display: block;
        clear:none !important;
        text-align: center;
      }
      
      #sidebar2 {
        display: inline-block;
        color: black;
        font-size: 14px;
        padding: 0;
      }
      
      #logoutTab {
        display: none;
      }
      #adminTab {
        display: none;
      }
      .container {
          position: relative;
          width: 50px;
          padding-left: 0px;
          margin: 0 auto 40px auto;
      
          -webkit-perspective: 800px;
             -moz-perspective: 800px;
              -ms-perspective: 800px;
               -o-perspective: 800px;
                  perspective: 800px;
      }
      .container .card {
          height: 100%;
      
          -webkit-transition: -webkit-transform 1s;
             -moz-transition:    -moz-transform 1s;
              -ms-transition:     -ms-transform 1s;
               -o-transition:      -o-transform 1s;
                  transition:         transform 1s;
      
          -webkit-transform-style: preserve-3d;
             -moz-transform-style: preserve-3d;
              -ms-transform-style: preserve-3d;
               -o-transform-style: preserve-3d;
                  transform-style: preserve-3d;
      }
      .container .card .face {
          position: absolute;
          width: 100%;
          height: 100%;
          font-family: Arial, sans-serif;
          font-weight: bold;
          color: #fff;
          text-align: center;
      
          -webkit-backface-visibility: hidden;
             -moz-backface-visibility: hidden;
              -ms-backface-visibility: hidden;
               -o-backface-visibility: hidden;
                  backface-visibility: hidden;
      }
      .container .card.flipped,
      .container .card .face2 {
          -webkit-transform: rotateY(180deg);
             -moz-transform: rotateY(180deg);
              -ms-transform: rotateY(180deg);
               -o-transform: rotateY(180deg);
                  transform: rotateY(180deg);
      }
      
      .store {
          display: none;
      }
      .buttons {
          text-align: center;
      }
      
      .drawControl2 {
        width: 100%;
        color: black;
        height: 50px;
        margin-bottom: 10px;
      }
      
      #editShapeB {
        display:none;
      }
      #delShapeB {
        display:none;
      }
      #step1Drawing {
        display:none;
      }
      #step2 {
        display:none;
      }
      #step3 {
        display:none;
      }
      h1 {
        color: black;
        font-size: 1em;
      }
      #saved, #savedCount {
        color: black;
      }
      
      table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            text-align: center;
      }
      
      .drawingController {
        display: none;
      }
      .drawingEditController {
        display: none;
      }
      
      .savetiles a {
        float: left !important;
        width: auto !important;
        height: 30px;
        font-size: 1.2em !important;
      }
      .rmtiles a {
        float: right !important;
        height: 30px;
        padding-right: 10px !important;
        padding-left: 10px !important;
        font-size: 1.2em !important;
      }
      
      #saveTilesStep {
        display: none;
      }
      
      #removeTilesStep {
        display: none;
      }
      
      .tileCount {
        display: none;
        text-align: center;
      }
      .modalButtons {
        width: auto;
        text-align: right;
      }
      .savingProgress {
        display: none;
        text-align: center;
      }
      .savingComplete {
        display: none;
        text-align: center;
      }
      #storage {
        text-align: center;
      }
      .modal-backdrop {
        z-index: 1250 !important;
      }
      .leaflet-control-attribution {
        margin-left: 40px !important;
      }
      
      #snackbar {
          visibility: hidden; /* Hidden by default. Visible on click */
          min-width: 250px; /* Set a default minimum width */
          margin-left: -125px; /* Divide value of min-width by 2 */
          background-color: #333; /* Black background color */
          color: #fff; /* White text color */
          text-align: center; /* Centered text */
          border-radius: 2px; /* Rounded borders */
          padding: 16px; /* Padding */
          position: fixed; /* Sit on top of the screen */
          z-index: 2001; /* Add a z-index if needed */
          left: 50%; /* Center the snackbar */
          bottom: 30px; /* 30px from the bottom */
      }
      
      /* Show the snackbar when clicking on a button (class added with JavaScript) */
      #snackbar.show {
          visibility: visible; /* Show the snackbar */
      
      /* Add animation: Take 0.5 seconds to fade in and out the snackbar. 
      However, delay the fade out process for 2.5 seconds */
          -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
          animation: fadein 0.5s, fadeout 0.5s 2.5s;
      }
      
      /* Animations to fade the snackbar in and out */
      @-webkit-keyframes fadein {
          from {bottom: 0; opacity: 0;} 
          to {bottom: 30px; opacity: 1;}
      }
      
      @keyframes fadein {
          from {bottom: 0; opacity: 0;}
          to {bottom: 30px; opacity: 1;}
      }
      
      @-webkit-keyframes fadeout {
          from {bottom: 30px; opacity: 1;} 
          to {bottom: 0; opacity: 0;}
      }
      
      @keyframes fadeout {
          from {bottom: 30px; opacity: 1;}
          to {bottom: 0; opacity: 0;}
      }
      
    body
      #snackbar Error message..

      #header
        nav.navbar.navbar-default.navbar-inverse(role='navigation', style='z-index: 10000;')
          .container-fluid
            .navbar-header
              button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar')
                span.sr-only Toggle navigation
                span.icon-bar
                span.icon-bar
                span.icon-bar
              #carousel.carousel.slide(data-ride='carousel', data-interval='5000', data-wrap='true', style='float:left; display:inline-block;')
                .carousel-inner(role='listbox')
                  .item.active
                    img(style='width:45px; height:45px;', src='../public/css/images/logos/blm.png', alt='First Slide')
                  .item
                    img(style='width:45px; height:45px;', src='../public/css/images/logos/fs.png', alt='Second Slide')
                  .item
                    img(style='width:45px; height:45px;', src='../public/css/images/logos/fws.png', alt='Third Slide')
                  .item
                    img(style='width:45px; height:45px;', src='../public/css/images/logos/nps.png', alt='Fourth Slide')
              .navbar-brand   SNAP Restoration
            #navbar.collapse.navbar-collapse
              ul.nav.navbar-nav(style='border-left: 1px solid #000000;')
                li.active
                  a(href='#') Map View
                li#adminTab
                  a(href='/admin/Add.html') Admin
              ul.nav.navbar-nav.navbar-right
                li#loginTab
                  a(href='login.html')
                    b Login
                li#logoutTab
                  b(style='color: #9d9d9d') Hello, 
                    span#username Username
                  a(href='javascript:logout();', style='display: inline-block; padding-left: 0px;') &nbsp(logout)
                                
      #overlay
      #map

        script(src='/public/scripts/asyncAddLayersMobileV2.js')
        script.
          document.getElementById('header').style.height = '50px';
          document.getElementById('map').style.height = ($(window).height()-50) + 'px';
          
          var loggedIn = false;
          function checkLogin() {
            $.ajax({
                type: "GET",
                url: "/loginStatus",
                dataType : "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) { 
                  console.log(data);
                  loggedIn = true;
                  document.getElementById('username').innerHTML = data.user;
                  document.getElementById('logoutTab').style.display = "block";
                  document.getElementById('loginTab').style.display = "none";
                  document.getElementById('adminTab').style.display = "block";
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    console.warn(XMLHttpRequest.responseText);
                }
            })
          }
          
          function logout() {
            console.log("logout initiated")
            $.ajax({
                type: "GET",
                url: "/logout",
                dataType : "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) { 
                  console.log(data);
                  document.getElementById('logoutTab').style.display = "none";
                  document.getElementById('loginTab').style.display = "block";
                  document.getElementById('adminTab').style.display = "none";
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    console.warn(XMLHttpRequest.responseText);
                }
            })
          }
          
          checkLogin();
          //import "babel-polyfill";
          var map;
          if (localStorage.getItem("mapBounds") == null) {
            map = L.map('map', {zoomSnap: 0.5, zoomDelta: 1, preferCanvas: false}).setView([36.211303, -115.114929], 8);
            map.removeControl(map.zoomControl);
          }
          else {
            //console.log(localStorage.getItem("mapBounds"))
            var bounds = JSON.parse(localStorage.getItem("mapBounds"));
            var zoom = JSON.parse(localStorage.getItem("mapZoom"));
            map = L.map('map', {zoomSnap: 0.5, zoomDelta: 1, maxBoundsViscosity: 0.8, minZoom: 12, preferCanvas: false}).setView([(bounds._northEast.lat + bounds._southWest.lat)/2, (bounds._northEast.lng + bounds._southWest.lng)/2], 12);
            map.removeControl(map.zoomControl);
            map.setMaxBounds([bounds._northEast,bounds._southWest]);
            map.setMinZoom(zoom);
          }
          var baseLayer = L.tileLayer.offline('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	mapID: 0,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14,
            id: 'rogerdodger617.2p4pk9co',
            accessToken: 'pk.eyJ1Ijoicm9nZXJkb2RnZXI2MTciLCJhIjoiY2l5aG83M3pzMDR3aDJ3cndobzdzOWFhMSJ9.b6ssRylqfIz40O7vKcDb2g'
          });
          
          var mapOpenStreet = L.tileLayer.offline('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	name: "OpenStreetMap",
          	mapID: 1,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14
          });
          
          var mapGRoad = L.tileLayer.offline('https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	name: "Google Roadmap",
          	mapID: 2,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGSatellite = L.tileLayer.offline('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	name: "Google Satellite",
          	mapID: 3,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGHyb = L.tileLayer.offline('https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	name: "Google Hybrid",
          	mapID: 4,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          var mapGTerrain = L.tileLayer.offline('https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',{
            attribution: '<a href="/attribution/privacy-security.html" target="_blank" style="display:inline-block;">Privacy &amp; Security</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/foia.html" target="_blank" style="display:inline-block;">FOIA</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/nofear.html" target="_blank" style="display:inline-block;">No Fear Act</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="/attribution/license.html" target="_blank" style="display:inline-block;">License</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://dodcio.defense.gov/DoDSection508/Std_Stmt.aspx" target="_blank" style="display:inline-block;">Accessibility/Section 508</a>&nbsp;&nbsp;&nbsp;' +
              '<a href="http://www.usa.gov" target="_blank" style="display:inline-block;">USA.gov</a>',
          	name: "Google Terrain",
          	mapID: 5,
          	zIndex: 1,
            maxZoom: 18,
            minZoom: 8,
            maxNativeZoom: 14,
          	subdomains:['mt0','mt1','mt2','mt3']
          });
          
          console.log(localStorage.getItem("currMapNum"));
          var currMapNum = JSON.parse(localStorage.getItem("currMapNum"));
          var currMap = baseLayer;
          if (currMap == null)
            localStorage.setItem("currMapNum", 0);
          
          switch (currMapNum){
            case 0:
              currMap = baseLayer;
              break;
            case 1:
              currMap = mapOpenStreet;
              break;
            case 2:
              currMap = mapGRoad;
              break;
            case 3:
              currMap = mapGSatellite;
              break;
            case 4:
              currMap = mapGHyb;
              break;
            case 5:
              currMap = mapGTerrain;
              break;
          }
          currMap.addTo(map);
          var canvasRenderer = L.canvas();
          
          var polygonsPane = map.createPane('polygons');
          var linesPane = map.createPane('lines');
          

          map.createPane('Points').style.zIndex = 390;
          map.createPane('Lines').style.zIndex = 380;
          map.createPane('Polygons').style.zIndex = 370;
          map.createPane('Regions').style.zIndex = 360;
          map.createPane('Bounds_County').style.zIndex = 350;
          map.createPane('Misc').style.zIndex = 340;
          
          
          L.Canvas.include({
          	_updatePoly: function (layer, closed) {
          		if (!this._drawing) { return; }
          
          		var i, j, len2, p,
          		    parts = layer._parts,
          		    len = parts.length,
          		    ctx = this._ctx;
          
          		if (!len) { return; }
          
          		// this._drawnLayers[layer._leaflet_id] = layer;
          
          		ctx.beginPath();
          
          		for (i = 0; i < len; i++) {
          			for (j = 0, len2 = parts[i].length; j < len2; j++) {
          				p = parts[i][j];
          				ctx[j ? 'lineTo' : 'moveTo'](p.x, p.y);
          			}
          			if (closed) {
          				ctx.closePath();
          			}
          		}
          
          		this._fillStroke(ctx, layer);
          
          		// TODO optimization: 1 fill/stroke for all features with equal style instead of 1 for each feature
          	},
          
          	_updateCircle: function (layer) {
          
          		if (!this._drawing || layer._empty()) { return; }
          
          		var p = layer._point,
          		    ctx = this._ctx,
          		    r = Math.max(Math.round(layer._radius), 1),
          		    s = (Math.max(Math.round(layer._radiusY), 1) || r) / r;
          
          		// this._drawnLayers[layer._leaflet_id] = layer;
          
          		if (s !== 1) {
          			ctx.save();
          			ctx.scale(1, s);
          		}
          
          		ctx.beginPath();
          		ctx.arc(p.x, p.y / s, r, 0, Math.PI * 2, false);
          
          		if (s !== 1) {
          			ctx.restore();
          		}
          
          		this._fillStroke(ctx, layer);
          	},
          
          })

          var roads = L.mbTiles("public/data/roads/{z}/{x}/{y}.pbf", {
          	name: "Roads",
          	storage: "Roads",
          	mbtileLayerName: "roads",
          	maxNativeZoom: 10,
          	minNativeZoom: 10,
          	minZoom: 6,
          	bounds: L.latLngBounds([36.9,-116.2],[35.0,-113.9]),
          	//legendIcon: drawRect,	
          	style: function(feature) {
          		return {
          			//interactive: true,
          			pane: 'Roads',
          			renderer: canvasRenderer,
          			weight: 0.5,
          			color: '#000000',
          			opacity: 1,
          			// dashArray: '5, 3',
          			fillColor: '#000000',
          			fillOpacity: 0.4,
          			popup: false
          			// fill: false
          		}
          	}
          })
          
          var soil = L.mbTiles("public/data/soil/{z}/{x}/{y}.pbf", {
          	name: "Soil Vulnerability",
          	storage: "Soil Vulnerability",
          	mbtileLayerName: "soil",
          	maxNativeZoom: 10,
          	minNativeZoom: 10,
          	minZoom: 6,
          	bounds: L.latLngBounds([36.9,-116.2],[35.0,-113.9]),
          	//legendIcon: drawRect,	
          	style: function(feature) {
          		return {
          			//interactive: true,
          			pane: 'Misc',
          			renderer: canvasRenderer,
          			weight: 0.5,
          			color: '#7c3400',
          			opacity: 1,
          			// dashArray: '5, 3',
          			fillColor: '#7c3400',
          			fillOpacity: 0.4,
          			popup: true
          			// fill: false
          		}
          	}
          })
          
          var layerStorage = [
          	'Roads',
          	'Soil Vulnerability'
          ];
          console.log(baseLayer)
          
          var saveTileControl = L.control.savetiles(currMap,{
            'zoomlevels':[12,14],
            'position': 'topcenter',
            'saveWhatYouSee': false,
            'confirm': function(layer, succescallback) {
                $('#savingModal').modal('show');
                document.getElementsByClassName('savingProgress')[0].style.display = 'none';
                document.getElementsByClassName('savingComplete')[0].style.display = 'none';
                document.getElementsByClassName('tileCount')[0].style.display = 'none';
                document.getElementsByClassName('tileCount')[1].style.display = 'none';
                document.getElementsByClassName('tileCount')[2].style.display = 'none';  
                if (layer._tilesforSave.length > 350) {
                  document.getElementsByClassName('tileCount')[0].style.display = 'block';
                  document.getElementsByClassName('tileCount')[0].innerHTML = "<span class='glyphicon glyphicon-remove' style='color: #ff0000' aria-hidden='true'></span>Warning: Cannot save large area of map. <br><br> Note: Zoom in to area needed. "
                  document.getElementById('confirmTileSave').style.display = 'none';
                  document.getElementById('setZoomTileSave').style.display = 'inline';
                  document.getElementById('cancelTileSave').style.display = 'inline';
                }
                else if (layer._tilesforSave.length < 10) {
                  document.getElementsByClassName('tileCount')[0].style.display = 'block';
                  document.getElementsByClassName('tileCount')[0].innerHTML = "<span class='glyphicon glyphicon-remove' style='color: #ff0000' aria-hidden='true'></span>Warning: Cannot save small area of map. <br><br> Note: Zoom out to area needed. "
                  document.getElementById('confirmTileSave').style.display = 'none';
                  document.getElementById('setZoomTileSave').style.display = 'inline';
                  document.getElementById('cancelTileSave').style.display = 'inline';
                }
                else {
                  document.getElementsByClassName('tileCount')[0].innerHTML = "Save " + layer._tilesforSave.length + " tiles for offline <br><br> Note: map will be locked until tiles are removed in the settings tab"
                  document.getElementsByClassName('tileCount')[0].style.display = 'block';
                  document.getElementById('confirmTileSave').style.display = 'inline';
                  document.getElementById('setZoomTileSave').style.display = 'none';
                  document.getElementById('cancelTileSave').style.display = 'inline';
                  $('#confirmTileSave').click(function() {
                    document.getElementsByClassName('savingProgress')[0].style.display = 'block';
                    document.getElementsByClassName('tileCount')[0].style.display = 'none';
                    document.getElementById('confirmTileSave').style.display = 'none';
                    document.getElementById('setZoomTileSave').style.display = 'none';
                    document.getElementById('cancelTileSave').style.display = 'none'; 
                    var bounds = map.getBounds();
                    localStorage.setItem("mapZoom", JSON.stringify(map.getZoom()));
                    localStorage.setItem("mapBounds", JSON.stringify(bounds));
                    localStorage.setItem("currMapNum", JSON.stringify(saveTileControl.getLayer().options.mapID));
                    document.getElementById('saveTilesStep').style.display = 'none';
                    document.getElementById('removeTilesStep').style.display = 'block';
                    map.setMaxBounds([bounds._northEast,bounds._southWest]);
                    map.setMinZoom(map.getZoom());
                    succescallback();
                  });
                }
                
                // if (window.confirm("Save " + layer._tilesforSave.length)) {
                //     var bounds = map.getBounds();
                //     localStorage.setItem("mapBounds", JSON.stringify(bounds));
                //     $('#savingModal').modal('show');
                //     document.getElementById('saveTilesStep').style.display = 'none';
                //     map.setMaxBounds([bounds._northEast,bounds._southWest]);
                //     map.setMinZoom(12);
                //     succescallback();
                // }
            },
            'saveText': '<button class="btn btn-primary">Save Area</button>',
            'confirmRemoval': function(layer, successCallback) {
              $('#deletingModal').modal('show');
              sidebar.close();
              $('#confirmTileDelete').click(function() {
                  successCallback();
                  localStorage.removeItem("mapBounds");
                  localStorage.removeItem("currMapNum");
                  map.setMaxBounds(null);
                  document.getElementById('saveTilesStep').style.display = 'block';
                  document.getElementById('removeTilesStep').style.display = 'none';
                  map.setMinZoom(8);
                  $('#deletingModal').modal('hide');
              });
            },
            'rmText': '<button>Delete Tiles</button>',
            'toggleButton': function toggleButton(val) {
              document.getElementsByClassName('savetiles')[0].style.display = val;
            }
            }).addTo(map);
          
          
          function setOfflineButtons(layer) {
            var progress;
            layer.on('savestart', function(e) {
                progress = 0;
                document.getElementById('progress').innerHTML = progress + '/' + e._tilesforSave.length;
            });
            layer.on('savetileend', function(e) {
                progress++;
                // console.log(e)
                document.getElementById('progress').innerHTML = progress + '/' + e.lengthToBeSaved;
                if (e.lengthSaved >= e.lengthToBeSaved) {
                  document.getElementsByClassName('savingProgress')[0].style.display = 'none';
                  document.getElementsByClassName('savingComplete')[0].style.display = 'block';
                  document.getElementsByClassName('savingComplete')[0].innerHTML = '<span class="glyphicon glyphicon-ok" style="color: #02ea02" aria-hidden="true"></span> Saved all tiles';
                }
            });
            layer.on('loadend', function(e) {
                //console.log(e)
                //alert("Saved all tiles");
                if (e._tilesforSave.length >= e.storagesize) {
                  document.getElementsByClassName('savingProgress')[0].style.display = 'none';
                  document.getElementsByClassName('savingComplete')[0].style.display = 'block';
                  document.getElementsByClassName('savingComplete')[0].innerHTML = '<span class="glyphicon glyphicon-ok" style="color: #02ea02" aria-hidden="true"></span> Saved all tiles';
                }
            });
            layer.on('storagesize', function(e) {
                document.getElementById('storage').innerHTML = e.storagesize + " offline tiles will be removed.";
            })
          }
          // set functions for each layer to save tiles
          
          setOfflineButtons(baseLayer);
          setOfflineButtons(mapOpenStreet);
          setOfflineButtons(mapGRoad);
          setOfflineButtons(mapGSatellite);
          setOfflineButtons(mapGHyb);
          setOfflineButtons(mapGTerrain);
          // var canvasRenderer = L.canvas();
          // function drawRect(context, style) {
          // 	context.strokeStyle = style.color;
          // 	if (style.dashArray) {
          // 		context.setLineDash(style.dashArray.split(','))
          // 	}
          // 	context.lineWidth = 3;
          // 	context.strokeRect(0, 0, 20, 12);
          // }
          
          // var layerStorage = [
          // 	'Soil Vulnerability'
          // ];
          // var soil = L.mbTiles("public/data/soil/{z}/{x}/{y}.pbf", {
          // 	name: "Soil Vulnerability",
          // 	storage: "Soil Vulnerability",
          // 	mbtileLayerName: "soil",
          // 	maxNativeZoom: 10,
          // 	minNativeZoom: 10,
          // 	minZoom: 6,
          // 	bounds: L.latLngBounds([36.9,-116.2],[35.0,-113.9]),
          // 	legendIcon: drawRect,	
          // 	style: function(feature) {
          // 		return {
          // 			interactive: true,
          // 			pane: 'polygons',
          // 			renderer: canvasRenderer,
          // 			weight: 0.5,
          // 			color: '#0f0',
          // 			opacity: 1,
          // 			// dashArray: '5, 3',
          // 			fillColor: '#e39e1c',
          // 			fillOpacity: 0.4,
          // 			// fill: false
          // 		}
          // 	}
          // }).addTo(map)
          
          
          
          
          function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
            _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      if (typeof Dexie == 'function') { 
                        if(navigator.onLine)
                          return getLayers();
                        else
                          return getOfflineLayers();
                      }
                      else {
                        console.log('dexie not here rn');
                      }
                      
                      // console.log('got here'); 
                      // $.getScript('/public/scripts/dexie.min.js', function()
                      // {
                      //   console.log('got here too');
                      //   $.getScript('/public/scripts/formDIV.js', function(){});
                      //   $.getScript('/public/scripts/asyncAddLayersV2.js', function(){return getLayers();});
                      // });
                      
                    case 3:
                      _context.next = 8;
                      break;
            
                    case 5:
                      _context.prev = 5;
                      _context.t0 = _context["catch"](0);
            
                      console.error(_context.t0);
            
                    case 8:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this, [[0, 5]]);
            }))();

          //(async function () {
            //try {
             // await getLayers();
            //}
            //catch (err) {
             // console.error(err)
            //}
          //}());
        
          var controlOptions = {
            container_width: "350px",
            container_maxHeight: "100%",
            group_maxHeight: "100%",
            autoZIndex: false,
            exclusive: false,
            collapsed: false
          };

          var overLay = []

          var control = L.Control.styledLayerControl(null, overLay, controlOptions);
          map.addControl(control);
          control.addOverlay( baseLayer, "MapBox", {groupName : "Basemaps"} );
          control.addOverlay( mapOpenStreet, "OpenStreetMap", {groupName : "Basemaps"} );
          control.addOverlay( mapGRoad, "Google Roadmap", {groupName : "Basemaps"} );
          control.addOverlay( mapGSatellite, "Google Satellite", {groupName : "Basemaps"} );
          control.addOverlay( mapGHyb, "Google Hybrid", {groupName : "Basemaps"} );
          control.addOverlay( mapGTerrain, "Google Terrain", {groupName : "Basemaps"} );
          
          control.addOverlay(roads, 'Roads', {groupName: 'Misc', expanded: false});
          control.addOverlay(soil, 'Soil Vulnerability', {groupName: 'Misc', expanded: false});
          
          // creates a temp layer so it can store the new features
          var editableLayers = new L.FeatureGroup();
          map.addLayer(editableLayers);
          L.control.scale({position: 'bottomright'}).addTo(map);
          
          var options = {
            position: 'bottomright',
            draw: {
              polyline: {
                allowIntersection: false,
                drawError: {
                  color: '#e10100', // Color the shape will turn when intersects
                  message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                },
                shapeOptions: {
                  color: '#e10100',
                  weight: 3
                }
              },
              polygon: {
                allowIntersection: false, // Restricts shapes to simple polygons
                drawError: {
                  color: '#e10100', // Color the shape will turn when intersects
                  message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                },
                shapeOptions: {
                  color: '#e10100'
                }
              },
              circle: false, // Turns off this drawing tool
              rectangle: false,
              marker: {
                icon: new L.Icon.Default()
              }
            },
            edit: {
              featureGroup: editableLayers, //REQUIRED!!
              edit: true,
              remove: true,
              selectedPathOptions: { // this property should be one level up
                color: '#000',
                fillColor: '#000'
              }
            }
          };
          
          L.Control.DrawingController = L.Control.extend({
              constructor: function constructor() {
                var button = null;
              },
              onAdd: function(map) {
                  button = L.DomUtil.create('button', 'drawingController');
                  button.innerHTML = 'Insert Value';
                  button.style.width = '100px';
                  button.style.zIndex = 2000;
                  button.className += " btn btn-default"
                  return button;
              },
              onRemove: function(map) {
                  // Nothing to do here
              },
              setVal: function(val, id) {
                button.innerHTML = val;
                button.id = id;
              },
              getButton: function() {
                return button;
              },
              setClass: function(newClass) {
                button.className = newClass + ' leaflet-control btn btn-default';
              }
          });
          
          L.control.drawingController = function(opts) {
              return new L.Control.DrawingController(opts);
          }
          var undoButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          undoButton1.setVal('Undo Last', 'undoDraw');
          var compButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          compButton1.setVal('Finish', 'finishDraw');
          var cancelButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          cancelButton1.setVal('Cancel', 'cancelDraw');
          cancelButton1.setClass('drawingEditController');
          var saveButton1 = L.control.drawingController({ position: 'topcenter' }).addTo(map);
          saveButton1.setVal('Finish', 'saveDraw');
          saveButton1.setClass('drawingEditController');
          
          var drawControl = new L.Control.Draw(options);
          //map.addControl(drawControl);
          L.control.zoom({position: 'topright'}).addTo(map);
          var thisLayerJSON
          var thisLayer

          map.on(L.Draw.Event.CREATED, function (event) {
            var layer = event.layer;
            thisLayer = layer;
            editableLayers.addLayer(layer);
            thisLayerJSON = layer.toGeoJSON();
            console.log(thisLayerJSON);
            //toggleButtons();
            
            turnOffTools();
            sidebar.open('drawTools');
            document.getElementById('step1').style.display = 'none';
            document.getElementById('step2').style.display = 'block';
            if (barrButton != null) {
              if (thisLayerJSON.geometry.type == "LineString")
                barrButton.style.display = 'block';
              else
                barrButton.style.display = 'none';
            }
              
            
          });
          //new L.shapefile('public/geoJSON/roads.zip').addTo(map);
        
      #sidebar.sidebar.collapsed
        // Nav tabs
        .sidebar-tabs
          ul(role='tablist')
            // top aligned tabs
            li
              a(href='#layers', role='tab')
                span.glyphicon.glyphicon-menu-hamburger(aria-hidden='true')
            li
              a(href='#drawTools', role='tab')
                span.glyphicon.glyphicon-pencil(aria-hidden='true')
            li
              a(href='#formTools', role='tab')
                span.glyphicon.glyphicon-info-sign(aria-hidden='true')
            li
              a(href='#savedSubs', role='tab')
                span.glyphicon.glyphicon-list-alt(aria-hidden='true')
            li
              a(href='#searchBar', role='tab')
                span.glyphicon.glyphicon-search(aria-hidden='true')

          ul(role='tablist')
            // bottom aligned tabs
            li
              a(href='#settings', role='tab')
                span.glyphicon.glyphicon-cog(aria-hidden='true')

        // Tab panes
        .sidebar-content
          #layers.sidebar-pane
            h1.sidebar-header
              | Layers
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            p.legend
              span.legend-item
                img(src='/public/css/images/npsSquare.png', width='8%', height='35%') 
                |  NPS 
                img(src='/public/css/images/blmSquare.png', width='8%', height='35%')  
                |  BLM 
              span.legend-item
                img(src='/public/css/images/fwsSquare.png', width='8%', height='35%') 
                |  FWS 
                img(src='/public/css/images/fsSquare.png', width='8%', height='35%') 
                |  FS 
            #layerTools2
          

          #drawTools.sidebar-pane
            h1.sidebar-header
              | Draw Tools
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #step1
              h1 Select shape to draw:
              button#drawLineB.drawControl2.btn.btn-default
                | Line
              br
              button#drawPolygonB.drawControl2.btn.btn-default
                | Polygon
              br
              button#drawMarkerB.drawControl2.btn.btn-default
                | Point
              br
            #step1Drawing
              button#editShapeB.drawControl2.btn.btn-danger
                | Edit
              br
              button#delShapeB.drawControl2.btn.btn-default
                | Delete
              br
              button#undoB.drawControl2.btn.btn-default
                | Undo
              br
              button#compB.drawControl2.btn.btn-default
                | Complete
              br
            #step2
              button#backStep1.btn.btn-danger
                span.glyphicon.glyphicon-chevron-left(aria-hidden='true')
                | Back
              h1 Select a feature type:
              button#restButton.drawControl2.btn.btn-default
                | Restoration
              br
              button#distButton.drawControl2.btn.btn-default
                | Disturbance
              br
              button#barrButton.drawControl2.btn.btn-default
                | Barrier
              br
            #step3
              button#backStep2.btn.btn-danger
                span.glyphicon.glyphicon-chevron-left(aria-hidden='true')
                | Back
              #sidebar2
                

          #formTools.sidebar-pane
            h1.sidebar-header
              | Marker Info
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #sidebar1
              
          #savedSubs.sidebar-pane
            h1.sidebar-header
              | Saved Submissions
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #editSaved
            #savedContent
              table.table.table-striped-faded#tableSubs
                thead
                  tr  
                    th Type/Shape
                    th Region
                    th Date
                tbody#saved
              br
              button#sync.btn.btn-primary Submit All Forms
              
              
          #searchBar.sidebar-pane
            h1.sidebar-header
              | Search
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            #searchBarTag
              #searchFilters(style="display:none;")
                button.btn.btn-danger#filterBack Back
                #filterError.alert.alert-danger(role='alert', style='margin-top: 10px; display: none;')
                  | Error: No filters were selected
                h5 Select Feature Type
                ul.nav.nav-pills.nav-justified.filterType
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='Disturbance' ) Disturbance
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='Restoration' ) Restoration
                  li(role='presentation', style='background-color: white;')
                    a(data-toggle='tab', value='Barrier' ) Barrier
                h5 Select Feature Shape
                ul.nav.nav-pills.nav-justified.filterShape
                  li(role='presentation', style='background-color: white;')
                    a#markerFilter(data-toggle='tab', value='Points' ) Point
                  li(role='presentation', style='background-color: white;')
                    a#lineFilter(data-toggle='tab', value='Lines' ) Line
                  li(role='presentation', style='background-color: white;')
                    a#polygonFilter(data-toggle='tab', value='Polygon' ) Polygon
                #filterForm
                #filterSearchButton(class="btn btn-primary") Save Filters
              #searchStep
                .input-group
                  span.input-group-btn
                    button#filterClear.btn.btn-warning(type='button' style='display: none;') Clear
                    button#filterSearch.btn.btn-default(type='button') Filters
                  input#searchID.form-control(type='text', placeholder='Search by keyword...')
                  span.input-group-btn
                    button#searchButton.btn.btn-default(type='button') Search
                table(style="width: 100%")
                  thead
                    tr
                      th GID
                      th Type/Shape
                      th Agency
                      th Region
                      th Code
                      th Date
                      th Observer
                      th T&E Species
                  tbody#filteredFeatures
            #filters
            
              
          #settings.sidebar-pane
            h1.sidebar-header
              | Settings
              .sidebar-close
                span.glyphicon.glyphicon-menu-left(aria-hidden='true')
            h3
              #removeTilesStep
                | Remove offline tiles?
                #deleteTiles
              #saveTilesStep
                | Save offline tiles?
                #confirmSaveTiles
                
      #savingModal.modal.fade.bs-example-modal-sm(tabindex='-1', role='dialog', aria-labelledby='mySmallModalLabel', data-keyboard='false', style="z-index: 1300;", data-backdrop='static')
        .modal-dialog.modal-sm(role='document')
          .modal-content#savingModalContent
            .modal-header
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') ×
              h4#mySmallModalLabel.modal-title Offline Tiles
            p.tileCount
            div.modalButtons
              button#confirmTileSave.tileCount.btn.btn-primary(type='button')
                | Confirm
              button#setZoomTileSave.tileCount.btn.btn-primary(type='button')
                | Set Zoom
              button#cancelTileSave.tileCount.btn.btn-default(type='button')
                | Cancel
            p.savingProgress 
              | Progress: 
              span#progress
            p.savingComplete
      #deletingModal.modal.fade.bs-example-modal-sm(tabindex='-1', role='dialog', aria-labelledby='mySmallModalLabel', data-keyboard='false', style="z-index: 1300;",data-backdrop='static')
        .modal-dialog.modal-sm(role='document')
          .modal-content#savingModalContent
            .modal-header
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') ×
              h4#mySmallModalLabel.modal-title Remove all saved tiles?
            p#storage
            div.modalButtons
              button#confirmTileDelete.btn.btn-danger(type='button')
                | Confirm
              button#cancelTileDelete.btn.btn-default(type='button')
                | Cancel


      script. 
        //$('#savingModal').modal({backdrop: 'static', keyboard: false})  
        document.getElementById('deleteTiles').appendChild(
          document.getElementsByClassName('rmtiles')[0]
        );
        document.getElementsByClassName('rmtiles')[0].children[0].className += "btn btn-danger";
        document.getElementById('confirmSaveTiles').appendChild(
          document.getElementsByClassName('savetiles')[0]
        );
        $('#cancelTileDelete').click(function() {
          $('#deletingModal').modal('hide');
        });
        $('#cancelTileSave').click(function() {
          $('#savingModal').modal('hide');
        });
        $('#setZoomTileSave').click(function() {
          $('#savingModal').modal('hide');
          map.setZoom(12);
        });
        
        // search button stuff
        $("#filterSearch").click(function(){
          $("#searchStep").hide();
          $("#searchFilters").show()
          
        });
        
        var lineButton = document.getElementById("drawLineB");
        var polygonButton = document.getElementById("drawPolygonB");
        var markerButton = document.getElementById("drawMarkerB");
        var editButton = document.getElementById("editShapeB");
        var deleteButton = document.getElementById("delShapeB");
        var restButton = document.getElementById("restButton");
        var distButton = document.getElementById("distButton");
        var barrButton = document.getElementById("barrButton");
        var undoDrawButton = document.getElementById("undoDraw");
        var finDrawButton = document.getElementById("finishDraw");
        var currForm = null;
        
        var undoButton = document.getElementById("undoB");
        var compButton = document.getElementById("compB");
        
        var drawLine = new L.Draw.Polyline(map, drawControl.options.polyline);
        var drawPoly = new L.Draw.Polygon(map, drawControl.options.polygon);
        var drawMark = new L.Draw.Marker(map, drawControl.options.marker);
        
        var currShape = null;
        function allOff() {
            var str = lineButton.className;
            if (str.includes(" active")) 
              lineButton.className = str.replace(" active", "");
            str = polygonButton.className;
            if (str.includes(" active")) 
              polygonButton.className = str.replace(" active", "");
            str = markerButton.className;
            if (str.includes(" active")) 
              markerButton.className = str.replace(" active", "");
            drawLine.disable();
            drawPoly.disable();
            drawMark.disable();
        }
        
        function turnOnTools() {
          var myElements = document.querySelectorAll(".drawingController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "block";
          }
          if (localStorage.getItem('mapBounds') == null) {
            document.getElementById('saveTilesStep').style.display = 'none';
            document.getElementById('removeTilesStep').style.display = 'block';
          }
        }
        function turnOffTools() {
          var myElements = document.querySelectorAll(".drawingController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "none";
          }
          if (localStorage.getItem('mapBounds') == null) {
            document.getElementById('saveTilesStep').style.display = 'block';
            document.getElementById('removeTilesStep').style.display = 'none';
          }
        }
        function turnOnEditTools() {
          var myElements = document.querySelectorAll(".drawingEditController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "block";
          }
          if (localStorage.getItem('mapBounds') == null) {
            document.getElementById('saveTilesStep').style.display = 'none';
            document.getElementById('removeTilesStep').style.display = 'block';
          }
        }
        function turnOffEditTools() {
          var myElements = document.querySelectorAll(".drawingEditController");
          for (var i = 0; i < myElements.length; i++) {
              myElements[i].style.display = "none";
          }
          if (localStorage.getItem('mapBounds') == null) {
            document.getElementById('saveTilesStep').style.display = 'block';
            document.getElementById('removeTilesStep').style.display = 'none';
          }
        }
        if (localStorage.getItem("mapBounds") != null) {
          $('#saveTilesStep').css("display", "none");
          $('#removeTilesStep').css("display", "block");
        }
        else {
          $('#saveTilesStep').css("display", "block");
          $('#removeTilesStep').css("display", "none");
        }
        document.getElementById("backStep1").addEventListener("click", function(){
          allOff();
          document.getElementById('step1').style.display = 'block';
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'none';
          map.removeLayer(thisLayer);
        });
        document.getElementById("backStep2").addEventListener("click", function(){
          document.getElementById('step1').style.display = 'none';
          document.getElementById('step2').style.display = 'block';
          document.getElementById('step3').style.display = 'none';
          currForm.toggle();
        });
        lineButton.addEventListener("click", function(){
            allOff();
            lineButton.className += " active";
            sidebar.close();
            drawLine.enable();
            currShape = drawLine;
            turnOnTools();
        });
        polygonButton.addEventListener("click", function(){
            allOff();
            polygonButton.className += " active";
            sidebar.close();
            drawPoly.enable();
            currShape = drawPoly;
            turnOnTools();
        });
        markerButton.addEventListener("click", function(){
            allOff();
            markerButton.className += " active";
            sidebar.close();
            drawMark.enable();
            currShape = drawMark;
            //turnOnTools();
        });
        undoDrawButton.addEventListener("click", function(){ 
          currShape.deleteLastVertex();
          currShape.deleteLastVertex();
        });
        finDrawButton.addEventListener("click", function(){ 
          currShape.deleteLastVertex();
          currShape.completeShape();
        });
        editButton.addEventListener("click", function(){
            new L.EditToolbar.Edit(map, {
                featureGroup: drawControl.options.edit.featureGroup,
                selectedPathOptions: drawControl.options.edit.selectedPathOptions
            }).enable()
        });
        deleteButton.addEventListener("click", function(){
            new L.EditToolbar.Delete(map, {
                featureGroup: drawControl.options.edit.featureGroup
            }).enable()
        });
        restButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          switch(thisLayerJSON.geometry.type){
            case 'Point':
              currForm = $('#restoPointForm');
              break;
            case 'Polygon':
              currForm = $('#restoPolyForm');
              break;
            case 'LineString':
              currForm = $('#restoLineForm');
              break;
          }
          $('#restoPointForm').toggle(thisLayerJSON.geometry.type === 'Point');
          $('#restoPolyForm').toggle(thisLayerJSON.geometry.type === 'Polygon');
          $('#restoLineForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        distButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          switch(thisLayerJSON.geometry.type){
            case 'Point':
              currForm = $('#distPointForm');
              break;
            case 'Polygon':
              currForm = $('#distPolyForm');
              break;
            case 'LineString':
              currForm = $('#distLineForm');
              break;
          }
          $('#distPointForm').toggle(thisLayerJSON.geometry.type === 'Point');
          $('#distPolyForm').toggle(thisLayerJSON.geometry.type === 'Polygon');
          $('#distLineForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        barrButton.addEventListener("click", function(){
          allOff();
          document.getElementById('step2').style.display = 'none';
          document.getElementById('step3').style.display = 'block';
          currForm = $('#barrierForm');
          $('#barrierForm').toggle(thisLayerJSON.geometry.type === 'LineString');
        });
        var sidebar = L.control.sidebar({ autopan: true, id: 'sidebar' }).addTo(map);
        // Moves the layer controls into the sidebar
        var htmlObject = control.getContainer();
        // Get the desired parent node.
        var a = document.getElementById('layerTools2');
        
        // Finally append that node to the new parent, recursively searching out and re-parenting nodes.
        function setParent(el, newParent)
        {
          newParent.appendChild(el);
        }
        setParent(htmlObject, a);
        
                
        $(document).on("mobileinit", function () {
          //register event to cache site for offline use
        cache = window.applicationCache;
        cache.addEventListener('updateready', cacheUpdatereadyListener, false);
        cache.addEventListener('error', cacheErrorListener, false);
        function cacheUpdatereadyListener (){
            window.applicationCache.update();
            window.applicationCache.swapCache();
            }
            function cacheErrorListener() {
                alert('site not availble offline')
            }
        });
        
        function popupMessage(text) {
          // Get the snackbar DIV
          var popup = document.getElementById("snackbar")
          popup.innerHTML = text;
          // Add the "show" class to DIV
          popup.className = "show";
      
          // After 3 seconds, remove the show class from DIV
          setTimeout(function(){ popup.className = popup.className.replace("show", ""); }, 3000);
        }
        
        // (function() {

        //   var allNavItems = $(".main-nav li");
        //   var allTabs = $(".tab");
        
        //   allNavItems.on("click", function(e) {
        
        //     e.preventDefault();
        
        //     allNavItems.removeClass("active");
        //     allTabs.removeClass("active");
        
        //     // this = list item
        //     $(this).addClass("active");
        
        //     var selector = $(this).find("a").attr("href");
        //     $(selector).addClass("active");
        
        //   });
        
        //   // ServiceWorker is a progressive technology. Ignore unsupported browsers
        //   if ('serviceWorker' in navigator) {
        //     console.log('CLIENT: service worker registration in progress.');
        //     navigator.serviceWorker.register('public/scripts/service-worker.js').then(function() {
        //       console.log('CLIENT: service worker registration complete.');
        //     }, function() {
        //       console.log('CLIENT: service worker registration failure.');
        //     });
        //   } else {
        //     console.log('CLIENT: service worker is not supported.');
        //   }
        
        // })();

      
